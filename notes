SET NODE PATH LOCALLY in TERMINAL(IN GIT BASH TERMINAL)

export PATH=/c/Users/codebase/node-v22.16.0-win-x64:$PATH

Set Up React App
npm create vite@latest app-name --template react
npm install (npm i)
Start the dev server: npm run dev

What npm install Does:
Reads package.json ‚Äì This file lists all the dependencies your project needs.
Downloads those dependencies ‚Äì It pulls them from the npm registry (like react, react-dom, etc.).
Creates a node_modules folder ‚Äì This is where all downloaded libraries live.
Creates or updates package-lock.json ‚Äì It locks the exact versions used, ensuring the same environment on every machine.

NPM= node package manager
React itself isn't tightly coupled to Node
React is browser code; Node is just used during development (build tools, servers, etc.). So small version bumps don‚Äôt usually cause issues unless you‚Äôre using specific Node APIs.

About React:

What is React?
React is a JavaScript library used to build user interfaces, especially for single-page applications. It helps you create components that are reusable, dynamic, and interactive.

Key Concepts of React:

1. Components= React apps are made of components. Each component is like a building block.
2. JSX (JavaScript XML) = write HTML-like code inside JavaScript.
3. Props (Properties)= Props are like function arguments ‚Äî they pass data from parent to child.
4. State = State is data that changes over time in a component.
   5.Hooks

Components
. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.

React components are JavaScript functions that return markup:
React component names must always start with a capital lette
you can nest it into another component:
example

function MyButton() {
return (
<button>I'm a button</button>
);
}

[ App ]
‚îî‚îÄ‚îÄ [ Component A ]
‚îú‚îÄ‚îÄ [ Component B ]
‚îî‚îÄ‚îÄ [ Component C ]

[State & Props] ‚Üí Unidirectional flow ‚Üí [Render with JSX] ‚Üí [Virtual DOM diff] ‚Üí [Real DOM update]

What is useEffect?
useEffect is a React Hook that lets you perform side effects in your components.
Side effects include things like:

1.Fetching data

2.Reading from localStorage

3.Navigating to another page

4.Setting timers

syntax

useEffect(() => {
// code to run after render
}, [dependencies]);

Why Use It?
Redirecting Authenticated Users:
When someone visits the login or register page, if they are already logged in (i.e., they already have a token), redirect them automatically.

Runs After Initial Render:
We don‚Äôt want to navigate while rendering ‚Äî we do it after the component is on the screen.

üìù Without useEffect, the redirect would happen every render ‚Äî causing infinite loops or errors.

useState() is a React Hook that lets you add state (i.e., data that changes) to functional components.

const [stateVariable, setStateVariable] = useState(initialValue);

Why do we use axios in React?
axios is a promise-based HTTP client used to make requests to external APIs or your own backend. In your e-commerce project, you need it to fetch product data, send login/registration info, or interact with any REST API.

‚úÖ Benefits of Using axios over fetch():

| Feature                                      | `axios` | `fetch` (built-in)             |
| -------------------------------------------- | ------- | ------------------------------ |
| Automatically converts JSON                  | ‚úÖ Yes  | ‚ùå No (you must use `.json()`) |
| Handles errors more cleanly                  | ‚úÖ Yes  | ‚ùå No (only network errors)    |
| Supports `timeout`, `cancel`, etc.           | ‚úÖ Yes  | ‚ùå Limited                     |
| Supports interceptors (e.g. for auth tokens) | ‚úÖ Yes  | ‚ùå No                          |
| Works the same in Node.js & Browser          | ‚úÖ Yes  | ‚ùå No (browser only)           |

Footer EXplain

import { Box, Typography, Container, Link, useTheme, useMediaQuery } from "@mui/material";

      Box: A wrapper component from MUI, like a div with extra styling powers.

      Typography: For styled text (like headings and paragraphs).

      Container: Adds consistent horizontal padding and centers content.

      Link: Styled anchor tag (<a>) that blends with the theme.

      useTheme: Gets the current Material UI theme (like breakpoints or colors).

      useMediaQuery: Lets us write responsive conditions in JavaScript (like CSS media queries).

Creates a functional React component named Footer.

const Footer = () => {}

      Responsive Condition (JS Media Query)
      const theme = useTheme();
      const isSmallScreen = useMediaQuery(theme.breakpoints.down("sm"));
      theme.breakpoints.down("sm"): Matches screen sizes smaller than the "small" breakpoint (typically <600px).

      isSmallScreen: A boolean ‚Äî true on small screens, false on larger ones.

What is useTheme() in MUI?
useTheme() is a React hook provided by MUI (Material-UI) that gives you access to the current theme object used in your app ‚Äî including colors, spacing, breakpoints, typography, and more.

      Why Use useTheme()?
         It allows you to:
          Access theme-defined values like primary/secondary colors, spacing units, typography, etc.
         Write responsive styles using theme‚Äôs breakpoints.
         Make components consistent with your app‚Äôs overall design.

      What‚Äôs Inside the theme Object?
            theme.palette.primary.main       // e.g. "#1976d2"
            theme.spacing(2)                 // e.g. "16px"
            theme.typography.fontFamily     // e.g. "Roboto"
            theme.breakpoints.values.sm     // e.g. 600 (px)

      When to Use It?
            Use useTheme():
              When you need dynamic access to theme values inside a component.
              Especially useful when styling with sx={{}} or styled() functions.
              To keep UI responsive and consistent with your global theme.

Some Concepts

What are Props?
Props (short for "properties") are used to pass data from one component to another in React.

      üî∏ They are like function parameters, but for components.


      Why do we need Props?


         You have a Welcome component and you want to show different names like:

         "Hello Ruchi"

         "Hello John"

         "Hello Priya"

         Instead of writing 3 separate components, you can pass a name using props.

      Basic Example
        1Ô∏è‚É£ Parent Component (App.js):

            import React from 'react';
            import Welcome from './Welcome';

            function App() {
            return (
               <div>
                  <Welcome name="Ruchi" />   //name="Ruchi" is a prop.
                  <Welcome name="John" />
               </div>
            );
            }

         Child Component (Welcome.js):

            import React from 'react';

            function Welcome(props) {
            return <h1>Hello {props.name}!</h1>;
            }

            export default Welcome;

    üß™ Use Object Destructuring (Shortcut)

               Instead of writing props.name, we often use this:

               function Welcome({ name }) {
               return <h1>Hello {name}!</h1>;
               }

      You Can Pass Multiple Props

         <Profile name="Ruchi" age={25} country="India" />

         function Profile({ name, age, country }) {
            return (
               <p>
                  {name} is {age} years old and lives in {country}.
               </p>
            );
            }

       Props are Read-only

What is useState?

In React, useState is used to create and manage data inside a component ‚Äî data that can change over time (like user input, toggles, counters, etc.).

      A storage box inside your component that can hold a value and update it when needed.
       Syntax

        const [stateVariable, setStateFunction] = useState(initialValue);

               | Part            | Meaning                                 |
         | --------------- | --------------------------------------- |
         | `value`         | The **current value** (like a variable) |
         | `setValue`      | A **function** to update that value     |
         | `useState(...)` | React function to **create state**      |

     Example 1: A simple counter


     import React, { useState } from 'react';

      function Counter() {
      const [count, setCount] = useState(0); // üîπ count = 0 initially

      const increase = () => {
         setCount(count + 1); // üî∏ update count
      };

      return (
         <div>
            <h2>Count: {count}</h2> {/* üîπ display current value */}
            <button onClick={increase}>Increase</button>
         </div>
      );
      }

      export default Counter;

      Real-world Uses of useState:

            | Use Case            | Example Value          |
      | ------------------- | ---------------------- |
      | Form inputs         | `email`, `password`    |
      | Toggle a popup      | `isOpen` (true/false)  |
      | Show/hide password  | `showPassword`         |
      | Shopping cart count | `cartItems`            |
      | Loading spinner     | `loading` (true/false) |


       Rules of useState
      ‚úÖ Always use it inside a function component

      ‚úÖ You can have multiple useState calls in one component

      ‚ùå Never use it outside a component or in loops/conditions

useNavigate is a React Hook.
You cannot call a Hook outside of a component.
React Hooks must run inside a functional component (or a custom Hook) ‚Äî not at the top level of a module.
